Changes in DAIDALUS-V2.0.d:
---
* Added hysteresis and persistence times
* Added preferred resolution persistence
* Added bands persistence
* Added alerting M of N

* Changed max_delta_resolution_xxx to persistence_preferred_xxx. A
  preferred resolution persists while the diference between the the
  preferred resolution and the best resolution is less than this parameter.

* Method setHorizontalSpeedUncertainty is now called
setHorizontalVelocityUncertainty.

* Method setVerticalVelocityZScore is now called
setVerticalSpeedZScore.

* Method alerting in Daidalus is now deprecated. It has been renamed
alertLevel.

* setAboveBelowHorizontalSpeed in DaidalusBands refactored as 
setAboveRelativeHorizontalSpeed and setBelowRelativeHorizontalSpeed.
Similar changes for  setRelativeVerticalSpeedBands, and
setRelativeAltitudeBands.

* Added configurable parameters for relative bands.

* Added UNKOWN bands region in cases where relative bands are
  used.

* Added hysteresis to alerting, preferred direction, and
resolution. Configurable through new parameters.

Implemented ownship/intruder centric alerting logic. There is a new
boolean configuration parameter ownship_centric_alerting. By default,
ownship_centric_alerting is set to true.

Programmatically this parameter can be changed through the
methods:
* setAlertingLogic(boolean ownship_centric) 
* setOwnshipCentricAlertingLogic()
* setIntruderCentricAlertingLogic()
The value of the parameter is obtained by the method
isAlertingLogicOwnshipCentric().

When the logic is ownship centric, an alerter for all traffic
aircraft is set by using
* setAlerterIndex(0,alerter_idx).

When the logic is intruder centric, individual alerters for each 
traffic aircraft (ac_idx) is set by using
* setAlerterIndex(ac_idx, alerter_idx)

The methods minHorizontalSeparationAtRecovery and
minVerticalSeparationAtRecovery in RecoveryInformation are now called
recoveryHorizontalDistance and recoveryVerticalDistance.

Changes in DAIDALUS-V2.1:
---

daa.set_WC_SC_228_MOPS--> daa. set_WC_DO_365
daa.set_Buffered_WC_SC_228_MOPS --> daa. set_Buffered_WC_DO_365

Daidalus.getMultiKinematicBands() --> disappeared: The Daidalus object
implements all the functionality of MultiKinematicBands().

The field Daidalus.parameters is not longer available. Daidalus itself
implements all the methods available in DaidalusParameters. Therefore,
something like daa.parameters.getLookaheadTime() is now written
daa.getLookahaedTime();

*VERY IMPORTANT* List of alerters is now 1-indexed. 0 means none, 1 means first
alerter, 2 means second alerter, etc. More precisely:

1. Alerters are 1-indexed, i.e., 1 is the index of first alerter
(e.g., Phase I), 2 is the index of second alerter (e.g., Phase 2), 3 is the index of third alerter, etc.

2. By default, Ownship is set to alerter 0 (meaning none)

3. By default, Traffic aircraft is set to alerter 1 

4. If Onwship's alerter is set to 0, then the logic is "intruder-centric" and each aircraft's alerter is used for each aircraft. This is the default behavior.

5. If Ownship's alerter is set to a value different from 0, then the logic is "ownship-centric" and this is the alerter that is used for every traffic aircraft.

Changes in DAIDALUS-V2.0:
---

* DADIALUS-2 supports multiple alerting structures that can be
  dynamically applied per traffic aircraft.

* DAIDALUS-2 corrects several misnomers in DAIDALUS-1 (see below).

* The class AlertLevels is now called Alerter. If daa is an object of
the class Daidalus, a particular alerter for this aircraft
can be set using the method:
daa.setAlerter(ac_idx,arleter_idx);
or equivalently,
daa.setAlerter(ac_idx,alerter_id);

In these calls, ac_idx is the index of the aircraft in the traffic
list. The index 0 represents the ownship and the last index is the one
in daa.lastTrafficIndex().  Alerters are collected in a list indexed
from 0 (default alerter) to daa.parameters.numberOfAlerters()-1.


Configuration by File
----
To configure alerters using a file (same as in DAIDALUS-1):
daa.loadFromFile("configuration_file.txt");

DAIDALUS-2 correctly reads DAIDALUS-1 configuration
files. In this case, only 1 alerter is configured. The configuration
file for multiple alerters is done by configuring a list of alerter identifiers, e.g.,

alerters = Buffered_DWC_Phase_I,DWC_Phase_I

The order in this list is important, the index 0 corresponds to
Buffered_DWC_Phase_I and the index 1 corresponds to DWC_Phase_I. The
definition of these alerters is provided in the lines that follows
this line in the configuration file. Each one is similar to the
configuration of alert_levels in DAIDALUS-1.

The field conflict_level is replaced by a field corrective_region and
it takes a conflict region, e.g., FAR, MID, NEAR, instead of a
number. The reason for this change is that different alerters may
configure the corrective volume at a different alerting level. 

Programatic Configuration
----
It works as follows.

daa.parameters.clearAlerters(); // Remove all alerters
daa.parameters.addAlerter(Alerter. DWC_Phase_I()); // This put DWC_Phase_I alerter at the index 0
Alerter alerter1 = new Alerter(...);
... configuration of alerter 1 ...
daa.parameters.addAlerter(alerter1);
Aleter alertere2 = new Alerter(...);
... configuration of alerter 2...
daa.parameters.addAlerter(alerter2);
etc.

Misnomers
----------
* In the configuration file, the prefix, postfix "trk" is now "hdir"
and "gs" is now "hs". Furtrhermore, all of them are postfix, e.g.,
"trk_step" is now "step_hdir". However, DAIDALUS-2 still recognizes
the field names used in DAIDALUS-1.

* In the names of methods the prefix/postfix "Track" and "GroundSpeed"
  have been replaced by "HorizontalDirection" and "HorizontalSpeed",
  respectively. The reason for this change is that these methods may
  represent ground- or air- based values depending on whether a wind
  vector was configured.

* The method daa.setWindField(...) is now called
  daa.setWindVelocityTo(...). This clarifies that the "wind field" is
  just a vector and that the direction of the wind is "to". The method
  daa.setWindVelocityFrom(...) can be sued in case the wind vector is
  specified in the "from" direction.

Other Changes
------------
* The class KinematicMultiBands is now DaidalusBands 
* The class KinematicBands disappeared as its functionality is fully integrated
into DaidalusBands.
* The class KinematicBandsCore is now DaidalusBandsCore
* The class KinematicBandsParameters is now DaidalusParameters

In DaidalusBands (former KinematicMultiBands)
* track() -> HorizontalDirectionAt()
* groundSpeed() -> HorizontalSpeedAt() 
* verticalSpeed() -> VerticalSpeedAt() 
* altitude() -> altitudeAt()
* directionRangeOf -> indexOfHorizontalDirection
* trackLength -> horizontalDirectionBandsLength
* groundSpeedLength -> horizontalSpeedBandsLength
* verticalSpeedLength -> verticalSpeedBandsLength
* altitudeLength -> altitudeBandsLength
* timeIntervalOfViolation()->timeIntervalOfRegionViolation()
* horizontalSpeed-> horizontalSpeedIntervalAt
* horizontalSpeedRegion -> horizontalSpeedRegionAt
* horizontalSpeedRangeOf -> indexOfHorizontalSpeed
* peripheralDirectionAircraft(level): list<AircraftStates> ->
  peripheralHorizontalDirectionAircraft
* peripheralHorizontalSpeedAircraft(level): list<AircraftStates> ->
  peripheralHorizontalSpeedBandsAircraft(region):list<string>
* peripheralVerticalSpeedAircraft(level): list<AircraftStates> ->
  peripheralVerticalSpeedBandsAircraft(region):list<string>
* peripheralAltitudeAircraft(level): list<AircraftStates> ->
 peripheralAltitudeBandsAircraft(region):list<string>

In Daidalus:
* getAircraftState -> getAircraftStateAt
* timeToViolation -> timeToCorrectiveVolume

Gotchas:
* Spreaded bands will now compute UNKOWN bands, for ranges outside
   min/max values. 
* Check usage of method getUnits from DaidalusParameters as field
names  have changed, e.g., "trk_step" is now "step_hs".
